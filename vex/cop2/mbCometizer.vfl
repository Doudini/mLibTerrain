//
// VEX Code Generated by Houdini 14.0.291
// Date: Thu Apr 16 01:00:05 2015
// File: /home/microbot/Documents/HoudiniRoot2015/mLibTerrain/150415mbVEXFilters
// Node: /vex/mbCometizer
//

#ifndef VOP_OP
#define VOP_OP
#endif
#ifndef VOP_COP2
#define VOP_COP2
#endif

#pragma opname mbCometizer
#pragma oplabel mbCometizer
#pragma opmininputs 0
#pragma opmaxinputs 0
#pragma label	amp	Amplitude
#pragma range	amp	-1	1
#pragma disablewhen	amp	{ active == 0 }
#pragma label	mode	Mode
#pragma hint	mode	joinnext
#pragma range	mode	0	2
#pragma label	alphaCd	Alpha
#pragma range	alphaCd	0	1
#pragma ramp_flt ramp ramp_the_basis_strings ramp_the_key_positions ramp_the_key_values
#pragma label	ramp	""
#pragma parmtag  ramp rampbasisdefault linear
#pragma parmtag  ramp rampshowcontrolsdefault 1
#pragma label	levels_Min	Levels
#pragma range	levels_Min	0	1
#pragma label	srcmax	"Maximum Main Size"
#pragma range	srcmax	0	10
#pragma label	destmin	"Minimum Size"
#pragma range	destmin	0	5
#pragma label	destmax	"Maximum Size"
#pragma range	destmax	0	5
#pragma label	spreadXMax	Max
#pragma hint	spreadXMax	joinnext
#pragma hint	spreadXMax	nolabel
#pragma range	spreadXMax	-1	1
#pragma label	spreadXMin	Min
#pragma hint	spreadXMin	joinnext
#pragma hint	spreadXMin	nolabel
#pragma range	spreadXMin	-1	1
#pragma label	spreadZMax	Max
#pragma hint	spreadZMax	joinnext
#pragma hint	spreadZMax	nolabel
#pragma range	spreadZMax	-1	1
#pragma label	spreadZMin	Min
#pragma hint	spreadZMin	nolabel
#pragma range	spreadZMin	-1	1
#pragma label	seed	Seed
#pragma range	seed	0	25
#pragma label	alphaSeed	"Alpha Seed"
#pragma range	alphaSeed	0	10
#pragma label	minAlpha	"Min Alpha"
#pragma range	minAlpha	0	1
#pragma label	maxAlpha	"Max Alpha"
#pragma range	maxAlpha	0	1
#pragma label	scaleCorrectionX	X
#pragma hint	scaleCorrectionX	joinnext
#pragma range	scaleCorrectionX	0	1
#pragma label	scaleCorrectionY	Y
#pragma range	scaleCorrectionY	0	1
#pragma label	end	"Iterartion / Comet Count"
#pragma range	end	0	100
#pragma label	rot	Rotation
#pragma range	rot	0	10


#include <voptype.h>
#include <voplib.h>

#include <pyro_math.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>
cop2
mbCometizer(float amp = 0;
	int mode = 0;
	float alphaCd = 1;
	string ramp_the_basis_strings[]={"linear","linear"}; float ramp_the_key_positions[]={0,1}; float ramp_the_key_values[]={0,1};
	float levels_Min = 0;
	float srcmax = 0.29999999999999999;
	float destmin = 0.10000000000000001;
	float destmax = 0.34999999999999998;
	float spreadXMax = 0;
	float spreadXMin = 0;
	float spreadZMax = 0;
	float spreadZMin = 0;
	int seed = 0;
	int alphaSeed = 0;
	float minAlpha = 0.80000000000000004;
	float maxAlpha = 1;
	float scaleCorrectionX = 1;
	float scaleCorrectionY = 0.5;
	int end = 8;
	float rot = 0)
{
    float	ramp1;
    string	ramp_the_color_space;
    vector	vec;
    vector	inPos;
    vector	vec1;
    vector	inCD;
    vector	input1;
    vector	result;
    int	added;
    float	rand;
    float	fitval;
    int	isactive;
    int	added1;
    int	sum;
    float	rand1;
    float	fitval1;
    int	isactive1;
    vector	vec2;
    int	added2;
    int	sum1;
    vector	rand2;
    vector	vec3;
    vector	vec4;
    vector	shift;
    vector	sum2;
    vector	vec5;
    vector	vec6;
    vector	xformpos;
    float	dist;
    float	rand3;
    float	shift1;
    float	product;
    float	shift2;
    vector	product1;
    int	sum3;
    float	rand4;
    float	shift3;
    vector	blend;
    vector	fitval2;
    int	isactive2;
    float	output1;
    float	output2;
    float	output3;
    float	output11;
    float	output21;
    float	output31;
    float	output12;
    float	output22;
    float	output32;
    vector	vec7;
    vector	product2;
    vector	sum4;
    vector	result1;
    vector	blend1;
    float	fval1;
    float	fval2;
    float	fval3;
    
    // Code produced by: floattovec2
    vec = vop_floattovec(X, 0, Y);
    
    // Code produced by: inPos
    inPos = vec;
    
    // Code produced by: floattovec1
    vec1 = vop_floattovec(R, G, B);
    
    // Code produced by: Cd
    inCD = vec1;
    
    // Code produced by: for1
    int	_i = 0;
    int	_end = end;
    int	_step = 1;
    vector	_inPos = inPos;
    float	_rot = rot;
    vector	_inCD = inCD;
    int	_XRES = XRES;
    int	_YRES = YRES;
    for( ; _i < _end; _i += _step )
    {
        
        // Code produced by: for1/input1
        input1 = { 1, 1, 1 };
        
        // Code produced by: for1/twoway1
        #ifndef __vex
          result = (0 != 0 ? (_i != 0 ? input1 : _inCD)
                                    : (_i != 0 ? _inCD : input1));
        #else
          #if !strcmp("v", "b")
            float scale = (0 != 0 ? (_i != 0 ? 1 : 0)
                                           : (_i != 0 ? 0 : 1));
            result = (1-scale)*_inCD + scale*input1;
          #else
            result = (0 != 0 ? (_i != 0 ? input1 : _inCD)
                                      : (_i != 0 ? _inCD : input1));
          #endif
        #endif
        
        // Code produced by: for1/addconst1
        added = _i + 100;
        
        // Code produced by: for1/random3
        #ifdef __vex
            if (0)
            	rand = random(added);
            else
               rand = rand(added);
        #else
            rand = cellnoise(added);
        #endif
        
        // Code produced by: for1/efit1
        
        #if 1
           fitval = efit(rand,0,1,-0.60099999999999998,-0.69799999999999995);
           isactive = 1;
        #else
           fitval = rand;
           isactive = 0;
        #endif
        
        // Code produced by: for1/addconst2
        added1 = _i + 80;
        
        // Code produced by: for1/add1
        sum = added1 + seed;
        
        // Code produced by: for1/random5
        #ifdef __vex
            if (0)
            	rand1 = random(sum);
            else
               rand1 = rand(sum);
        #else
            rand1 = cellnoise(sum);
        #endif
        
        // Code produced by: for1/efit2
        
        #if 1
           fitval1 = efit(rand1,0,1,-0.13900000000000001,-0.32800000000000001);
           isactive1 = 1;
        #else
           fitval1 = rand1;
           isactive1 = 0;
        #endif
        
        // Code produced by: for1/floattovec1
        vec2 = vop_floattovec(fitval, 0, fitval1);
        
        // Code produced by: for1/addconst3
        added2 = _i + 10;
        
        // Code produced by: for1/add2
        sum1 = added2 + seed;
        
        // Code produced by: for1/random6
        #ifdef __vex
            if (0)
            	rand2 = random(sum1);
            else
               rand2 = rand(sum1);
        #else
            rand2 = cellnoise(sum1);
        #endif
        
        // Code produced by: for1/floattovec3
        vec3 = vop_floattovec(spreadXMin, 0, spreadZMin);
        
        // Code produced by: for1/floattovec2
        vec4 = vop_floattovec(spreadXMax, 0, spreadZMax);
        
        // Code produced by: for1/Spread
        shift = vop_fit(rand2, { 0, 0, 0 }, { 1, 1, 1 }, vec3, vec4);
        
        // Code produced by: for1/add_Spread
        sum2 = vec2 + shift;
        
        // Code produced by: for1/rotation
        vec5 = vop_floattovec(0, _rot, 0);
        
        // Code produced by: for1/floattovec4
        vec6 = vop_floattovec(scaleCorrectionX, 1, scaleCorrectionY);
        
        // Code produced by: for1/xform1
        xformpos = _inPos * maketransform(0,0,sum2,vec5,vec6,{ 0, 0, 0 });
        
        // Code produced by: for1/distance1
        dist = distance(xformpos, { 0, 0, 0 });
        
        // Code produced by: for1/random1
        #ifdef __vex
            if (1)
            	rand3 = random(_i);
            else
               rand3 = rand(_i);
        #else
            rand3 = cellnoise(_i);
        #endif
        
        // Code produced by: for1/fit2
        shift1 = vop_fit(rand3, 0, 1, destmin, destmax);
        
        // Code produced by: for1/multiply2
        product = srcmax * shift1;
        
        // Code produced by: for1/fit1
        shift2 = vop_fit(dist, levels_Min, product, 0, 1);
        
        // Code produced by: for1/ramp1
        ramp_the_color_space = "rgb";
        ramp1 = spline(ramp_the_basis_strings, shift2, ramp_the_key_values, ramp_the_key_positions);
        
        // Code produced by: for1/multiply1
        product1 = result * ramp1;
        
        // Code produced by: for1/add3
        sum3 = _i + alphaSeed;
        
        // Code produced by: for1/random4
        #ifdef __vex
            if (1)
            	rand4 = random(sum3);
            else
               rand4 = rand(sum3);
        #else
            rand4 = cellnoise(sum3);
        #endif
        
        // Code produced by: for1/fit3
        shift3 = vop_fit(rand4, 0, 1, minAlpha, maxAlpha);
        
        // Code produced by: for1/mix1
        #ifdef __vex
          blend = lerp(result, product1, shift3);
        #else
          blend = mix(result, product1, shift3);
        #endif
        
        // Code produced by: for1/suboutput1
        _inCD = blend;
    }
    
    // Code produced by: efit1
    
    #if 1
       fitval2 = efit(_inCD,amp,1,0,1);
       isactive2 = 1;
    #else
       fitval2 = _inCD;
       isactive2 = 0;
    #endif
    
    // Code produced by: autoconvert
    vop_vectofloat(fitval2, output1, output2, output3);
    
    // Code produced by: autoconvert
    vop_vectofloat(fitval2, output11, output21, output31);
    
    // Code produced by: autoconvert
    vop_vectofloat(fitval2, output12, output22, output32);
    
    // Code produced by: Normal
    vec7 = vop_floattovec(output1, output11, output12);
    
    // Code produced by: multiply1
    product2 = fitval2;
    
    // Code produced by: add1
    sum4 = fitval2;
    
    // Code produced by: switchMode
    if( mode == 0 )
        result1 = vec7;
    else if( mode == 1 )
        result1 = product2;
    else
        result1 = sum4;
    
    // Code produced by: mix1
    #ifdef __vex
      blend1 = lerp({ 0, 0, 0 }, result1, alphaCd);
    #else
      blend1 = mix({ 0, 0, 0 }, result1, alphaCd);
    #endif
    
    // Code produced by: vectofloat1
    vop_vectofloat(blend1, fval1, fval2, fval3);
    
    // Code produced by: output1
    float tempR = fval1;
    float tempG = fval2;
    float tempB = fval3;
    R = tempR;
    G = tempG;
    B = tempB;
}
